name: KB Newspaper Scraper

on:
  workflow_dispatch:
    inputs:
      year:
        description: 'Year to scrape (e.g., 1865)'
        required: true
        default: '1865'
      month:
        description: 'Month to scrape (1-12)'
        required: true
        default: '1'
      operation:
        description: 'Operation to perform'
        required: true
        default: 'start-month'
        type: choice
        options:
          - start-month
          - continue-scraping
          - retry-failed
          - verify-month
      newspaper_ids:
        description: 'Newspaper IDs (comma-separated, leave empty for default)'
        required: false
        default: ''

jobs:
  scrape:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install Chrome
        run: |
          wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
          echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" | sudo tee /etc/apt/sources.list.d/google-chrome.list
          sudo apt-get update
          sudo apt-get install -y google-chrome-stable

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Sleep 5 seconds
        run: sleep 5

      - name: Set up Google Drive credentials
        run: |
          echo '${{ secrets.GOOGLE_DRIVE_SERVICE_ACCOUNT }}' > service-account.json
          echo "GOOGLE_APPLICATION_CREDENTIALS=service-account.json" >> $GITHUB_ENV

      - name: Process days sequentially (start-month)
        if: ${{ github.event.inputs.operation == 'start-month' }}
        run: |
          YEAR=${{ github.event.inputs.year }}
          MONTH=${{ github.event.inputs.month }}
          # Determine the number of days in the month
          DAYS_IN_MONTH=$(python -c "import calendar; print(calendar.monthrange(int('${{ github.event.inputs.year }}'), int('${{ github.event.inputs.month }}'))[1])")
          echo "Processing ${DAYS_IN_MONTH} days for ${YEAR}-${MONTH}"
          
          # Create an empty state file if it doesn't exist
          if [ ! -f "scraper_state.json" ]; then
            echo "{}" > scraper_state.json
            echo "Created empty scraper_state.json file"
          fi
          
          # Process each day sequentially
          for day in $(seq 1 $DAYS_IN_MONTH); do
            DAY_PADDED=$(printf "%02d" $day)
            DATE="${YEAR}-$(printf "%02d" $MONTH)-${DAY_PADDED}"
            NEXT_DATE=$(date -d "$DATE + 1 day" +"%Y-%m-%d")
            
            echo "----------------------------------------------------------------"
            echo "Processing day $day ($DATE) of ${YEAR}-${MONTH}"
            echo "----------------------------------------------------------------"
            
            # Run the scraper for this day (adjust the script name as needed)
            python src/01-scrape-images.py \
              --start-date "$DATE" \
              --end-date "$NEXT_DATE" \
              --download-dir kb_newspapers \
              --headless \
              --log-level INFO
              
            sleep 5
          done
          echo "All days processed for ${YEAR}-${MONTH}"